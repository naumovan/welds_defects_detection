import cv2
import numpy as np
import streamlit as st
import matplotlib.pyplot as plt
from ultralytics import YOLO
from sahi import AutoDetectionModel

from welds_defects_detection.SahiOpenVino import load_openvino_sahi
from welds_defects_detection.config import MODELS, IS_INTEL, MODEL_SIZES
from welds_defects_detection.detection import detect_defects


@st.cache_resource()
def get_model(size) -> tuple[YOLO, list[str]]:
    model = YOLO(MODELS[size])
    classes = model.names
    return model, classes


@st.cache_resource()
def get_model_sahi(size) -> tuple[YOLO, list[str]]:
    if IS_INTEL:
        model = load_openvino_sahi(
            model_path=MODELS[size],
            confidence_threshold=0,
            device="cpu",  # or 'cuda:0'
        )
    else:
        model = AutoDetectionModel.from_pretrained(
            model_type="yolov8",
            model_path=MODELS[size],
            confidence_threshold=0,
            device="cpu",  # or 'cuda:0'
        )

    _, classes = get_model(size)
    return model, classes


def load_image():
    image_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", type=["png", "jpg", "jpeg"])
    if image_file is not None:
        bytes_data = image_file.read()
        image_orig = cv2.imdecode(np.frombuffer(bytes_data, np.uint8), cv2.IMREAD_COLOR)
        image_orig = cv2.cvtColor(image_orig, cv2.COLOR_BGR2RGB)
        return image_orig
    return None


def frontend():
    st.set_page_config(
        page_title="–î–µ—Ç–µ–∫—Ü–∏—è —Å–≤–∞—Ä–Ω—ã—Ö —à–≤–æ–≤",
        page_icon="ü§ñ",
        layout="wide",
        initial_sidebar_state="expanded",
    )

    st.title("–î–µ—Ç–µ–∫—Ü–∏—è —Å–≤–∞—Ä–Ω—ã—Ö —à–≤–æ–≤")
    st.sidebar.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏")

    model_size = st.sidebar.select_slider(
        "–í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å",
        options=MODEL_SIZES.keys(),
        format_func=lambda x: MODEL_SIZES[x],
    )

    use_sahi = st.sidebar.checkbox("–î–µ—Ç–µ–∫—Ü–∏—è –º–µ–ª–∫–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤")

    with st.sidebar.expander("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", expanded=False):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä–æ–≥–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        confidence = float(st.slider("–§–∏–ª—å—Ç—Ä —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏", 25, 100, 40)) / 100
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ SAHI
        if use_sahi:
            st.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ SAHI")
            size_window_sahi = st.slider("–†–∞–∑–º–µ—Ä —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ –æ–∫–Ω–∞", 64, 512, 256, 64)
        else:
            size_window_sahi = None

    image = load_image()
    if image is not None:
        with st.spinner("–ò–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è..."):
            if not use_sahi:
                model, model_classes = get_model(model_size)
            else:
                model, model_classes = get_model_sahi(model_size)
                model.confidence_threshold = confidence
            class_counts, res_image = detect_defects(
                image, model, model_classes, use_sahi, confidence,
                size_window_sahi,
            )
            st.image(res_image, caption="–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏", use_column_width=True)

            if class_counts:
                st.sidebar.title("–î–∏–∞–≥—Ä–∞–º–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤")
                fig, ax = plt.subplots()
                ax.bar(class_counts.keys(), class_counts.values())
                ax.set_xlabel('–ö–ª–∞—Å—Å—ã')
                ax.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
                st.sidebar.pyplot(fig)


if __name__ == "__main__":
    frontend()
